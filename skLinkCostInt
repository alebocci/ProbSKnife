%Partition: (DataLabel, CharLabel, [Sw1,Sw2,Sw3...])
:- consult('skreplacerMin').

:- consult('smallModel').
:- consult('utils').
:- use_module(library(lists)).
query(test([((top, safe), [south, west, east, north])],[(data1, low)],0.0009765625,R)).

test(InitP,Comb,Pcomb,Cost):-
    links(InitP,[],StartingLinks),
    calculateCost(smallExample,Comb,Pcomb,StartingLinks,InitP,Cost).


linksbys(P,S,Links):-
    links(P,[],L),
    software(S,_,_,_,_),
    findall((S,S2,C,St),(member((S,S2,C,St),L);member((S2,S,C,St),L)),Links).

partitioningCost(AppId,InitPartitions,CombinationsProb,(NPartitions,OneStepCost)):-
    links(InitPartitions, [],StartingLinks), %[] is starting links list
    countPartitions(InitPartitions,NPartitions),
    combinationCost(CombinationsProb,AppId,StartingLinks,InitPartitions,OneStepCost).

combinationCost([(Comb,Pcomb)|Combs],AppId,StartingLinks,InitPartitions,TotCost):-
    calculateCost(AppId,Comb,Pcomb,StartingLinks,InitPartitions,CCost),
    combinationCost(Combs,AppId,StartingLinks,InitPartitions,SubCost),
    Cost is Pcomb * CCost,
    TotCost is Cost + SubCost.
combinationCost([],_,_,_,0).

countPartitions([_|Ps],N):-
    countPartitions(Ps,Ns),
    N is Ns + 1.
countPartitions([],0).


calculateCost(AppId,LabelsChanging, Prob, StartingLinks,InitPartitions,Cost):-
    %Prob > 0.005,
    skReplace(AppId, InitPartitions, StartingLinks, Labels, NewPartitions),
    links(NewPartitions,[],NewLinks),
    linksCost(StartingLinks,NewLinks,Cost).

%calculateCost(_,LabelsChanging, Prob_,_,0):-
%    Prob =< 0.005.

linksCost([(S1,S2,C,St1)|Slinks],NewLinks,Cost):-
    \+ member((S1,S2,C,St1),NewLinks),
    linkCost(Slinks,NewLinks,SubCost),
    Cost is C + SubCost.
linksCost([(S1,S2,C,St1)|Slinks],NewLinks,SubCost):-
    member((S1,S2,C,St1),NewLinks),
    linkCost(Slinks,NewLinks,SubCost).
linksCost([],_,0).